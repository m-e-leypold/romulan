#!/usr/bin/env sbcl-script
;;; -*- common-lisp -*- ------------------------------
;;;
;;; example-script - Example for romulan usage in scripting
;;; Copyright (C) 2023  M E Leypold
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; * Importing the runtime environment ----------------------------------------------------------------------
;;;
;;;   Notes:
;;;     - (require 'asdf) is necessary for use with sbcl --script. With sbcl-script it is a no-op.
;;;     - Redirectiing *standard-output* while loading asdf systems, so that the compile messages
;;;       go to *error-ouput*. This is necessary so that scripts play nicely in shell pipelines.
;;;

(require 'asdf)

(let ((*standard-output* *error-output*))
  (asdf:require-system "de.m-e-leypold.romulan"))

;;; * Importing the runtime environment ----------------------------------------------------------------------

(use-package :de.m-e-leypold.romulan)

;;; * Defining a "multi-command" interface with sub-commands -------------------------------------------------

(commandline-subcommand-interface romulan-test "shout some words or say hello"

  :usage "[-v] [-u <user>] <command> [options ...]"

  :options (:user    (:type :string
		      :description "user to greet"
		      :short-name #\u
		      :long-name "user"
		      :env-vars ("USER"))
	    :verbose (:type :counter
		      :description "verbosity level, every -v bumps up the verbosity by 1"
		      :short-name #\v
		      :long-name "verbose")))

(define-subcommand shout (words &key user verbose)

    (:description "shouts back anything you write"
     :usage       "[options ...] [arguments ...]"
     :varargs     t

     :options     (:friend (:type :string
			    :description "a friend"
			    :short-name #\f
			    :long-name "friend"
			    :initial-value ""
			    :env-vars ("FRIEND"))
		   :output (:type :string
			    :description "Output file"
			    :short-name #\o
			    :long-name "output"
			    :initial-value ""
			    :env-vars ("OUTPUT"))))

  (if (< 1 verbose)
      (format t "DEBUG: verbosity => ~S~%" verbose))

    (if (< 0 verbose)
      (format t "Hello, ~A!~%" user))
  (format t "~{~A~^, ~}~%" (mapcar #'string-upcase words)))


(end-subcommand-interface)

;;; * Immediately executing the commandline interface --------------------------------------------------------
;;;
;;;   Note: commandline-subcommand-interface created a function that executes the defined interface.
;;;

(romulan-test)
